on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
      strategy:
      matrix:
       include:
         # minimal gcc version (also on loewe cluster)
         - runs-on: ubuntu-16.04
           packages_to_add: "libboost-all-dev g++-4.8"
           compiler_to_use: "CC=gcc-4.8 && CXX=g++-4.8"
         # test fias machine gcc version
         - runs_on: ubuntu-18.04
           packages_to_add: "libboost-all-dev g++-5 doxygen-latex graphviz"
           compiler_to_use: "CC=gcc-5 && CXX=g++-5"
         # current main gcc version in standard distros
         #- runs_on: ubuntu-20.04
         #  packages_to_add: "libboost-all-dev g++-9"
         #  compiler_to_use: "CC=gcc-9 && CXX=g++-9"
           #"CC=clang-9 && CXX=clang++-9" to be added a matrix
         # mac os 11  
         #- runs_on: macos-11.0
         #  packages_to_add: boost
         #  compiler_to_use: "CC=clang && CXX=clang++"
   
         #sudo apt-get install -y "clang-<version>" "lldb-<version>" "lld-<version>" "clang-format-<version>"
         #sudo apt-get install -y "clang-8" "lldb-8" "lld-8" "clang-format-8"
  steps:
       #first, we update the distro and we install the package we need:
       ENV 



# For example, use this command to install gcc 8
sudo apt-get install g++-8 -y

before_install:
  - eval "${MATRIX_EVAL}"
  - export SMASH_ROOT=$(pwd)
  # pythia
  - wget http://home.thep.lu.se/~torbjorn/pythia8/pythia8303.tgz &&
    tar xf pythia8303.tgz && rm pythia8303.tgz &&
    cd pythia8303 &&
    ./configure --cxx-common='-std=c++11 -march=native -mfpmath=sse -O3 -fPIC' &&
    make -j$(nproc) &&
    cd ..
  # clang-format
  - if [ $TRAVIS_OS_NAME = osx ]; then curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz;
   else  curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi &&
   mkdir clang6_0_0 && tar -xf clang6_0_0.tar.xz -C clang6_0_0 --strip-components=1
  # gsl
  - wget http://ftpmirror.gnu.org/gsl/gsl-2.0.tar.gz &&
    tar -zxf gsl-2.0.tar.gz && rm gsl-2.0.tar.gz &&
    export GSL=$(pwd)/gsl-2.0 &&
    cd $GSL &&
    ./configure --prefix $GSL &&
    make -j$(nproc) --silent &&
    make install --silent &&
    cd $SMASH_ROOT
  # eigen
  - wget http://gitlab.com/libeigen/eigen/-/archive/3.3.5/eigen-3.3.5.tar.gz &&
    tar -xf eigen-3.3.5.tar.gz -C $HOME
  # cpplint
  - pip install --user cpplint

install:
  - cd $SMASH_ROOT
  - mkdir build
  - cd build
  - cmake -DPythia_CONFIG_EXECUTABLE=$SMASH_ROOT/pythia8303/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$HOME/eigen-3.3.5/ -DGSL_ROOT_DIR=$GSL ..
  - make -j$(nproc)

script:
  # test that everything is documented (only for one build)
  - if [ "$MATRIX_EVAL" = "CC=gcc-5 && CXX=g++-5" ]; then make undocumented && make undocumented_test; fi
  # use correct clang version for format helper
  - PATH=$SMASH_ROOT/clang6_0_0/bin/:$PATH ./../bin/clang-format-helper.bash -t
  - CTEST_OUTPUT_ON_FAILURE=1 ctest -j$(nproc)

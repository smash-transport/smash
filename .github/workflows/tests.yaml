on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_pull:
    # we use jobs in a matrix.
    # the OS to be used for the test is taken from the current matrix element
    runs-on: ${{ matrix.os }}
    strategy:
      # we want to avoid to stop all the tests the first time that one of them gets an error
      fail-fast: false
      matrix:
        include:
        #here we set up the various matrix elements
        #the entries in each matrix element are just variables, not keywords, with (hopefully) self-explaining names
        # 1st matrix element, minimum GNU compiler version
        - os: ubuntu-20.04
          site: "linux-minimum-gcc"
          packages_to_add: "g++-8 doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc-8"
          cxx_compiler_to_use: "g++-8"
        # 2nd matrix element, recent LTS Ubuntu distribution with gcc
        - os: ubuntu-20.04
          site: "linux-default-gcc"
          packages_to_add: "doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc"
          cxx_compiler_to_use: "g++"
        # 3rd matrix element, recent LTS Ubuntu distribution with clang
        - os: ubuntu-20.04
          site: "linux-default-clang"
          packages_to_add: "libgsl-dev"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
        # 4th matrix element, osx 11 with clang
        - os: macos-11
          site: "mac"
          packages_to_add: "gsl"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
    steps:
    # this is an action provided by GitHub to checkout the repository
    - uses: actions/checkout@v3
    # we set the name of the step, collecting all the tests here except those about formatting
    - name: code_check
    # we set some environment variables for the specific OS version
      env:
        CC: ${{ matrix.c_compiler_to_use }}
        CXX: ${{ matrix.cxx_compiler_to_use }}
        OS_NAME: ${{ matrix.os }}
        SITE: ${{ matrix.site }}
      # we run the step. We recall that in YAML the pipe symbol "|" means that the following lines, including newlines, are interpreted literally
      run: |
        # which version of cmake is used
        cmake --version
        # we set the smash root directory
        export SMASH_ROOT=$PWD
        # we install the missing packages
        if [ $SITE == "mac" ]; then
            brew install ${{ matrix.packages_to_add }}
        else
            sudo apt-get install ${{ matrix.packages_to_add }} -y
        fi
        # we download and install Pythia
        wget https://pythia.org/download/pythia83/pythia8309.tgz && tar xf pythia8309.tgz && rm pythia8309.tgz && cd pythia8309
        ./configure --cxx-common='-std=c++17 -march=native -mfpmath=sse -O3 -fPIC -pthread' && make -j$(nproc) && cd ..
        # we get eigen
        wget http://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz && tar -xf eigen-3.4.0.tar.gz -C $HOME
        # we get cpplint
        wget https://raw.githubusercontent.com/cpplint/cpplint/1.6.0/cpplint.py && chmod +x cpplint.py && mkdir -p $HOME/bin && mv cpplint.py $HOME/bin
        export PATH=$HOME/bin:$PATH
        # now we build SMASH
        cd $SMASH_ROOT && mkdir build && cd build
        cmake .. -DPythia_CONFIG_EXECUTABLE=$SMASH_ROOT/pythia8309/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$HOME/eigen-3.4.0/
        make -j$(nproc)
        # we check the building of the documentation for a specific case
        if [ $SITE == "linux-minimum-gcc" ]; then make undocumented_test && make user; fi
        # we run the tests
        CTEST_OUTPUT_ON_FAILURE=1 ctest -j$(nproc)
    # We now setup python environment to then install cmake-format, but we do so on one site only
    # since we are going to test only there whether the codebase is correctly formatted or not
    - if: matrix.site == 'linux-default-gcc'
      # this is an other GitHub action to properly setup the python environment
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: code_format_check
      if: matrix.site == 'linux-default-gcc'
      run: |
        # we download and unpack clang in $HOME to have clang-format available, curl -L to follow redirects
        curl -# -L -o $HOME/clang13_0_0.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz &&
        mkdir $HOME/clang13_0_0 && tar -xf $HOME/clang13_0_0.tar.xz -C $HOME/clang13_0_0 --strip-components=1
        # we install cmake-format in a dedicated directory
        mkdir $HOME/python-tools && pip install --target $HOME/python-tools cmakelang==0.6.13
        export PYTHONPATH=$HOME/python-tools:$PYTHONPATH
        # we check the correct formatting of the code
        PATH=$HOME/clang13_0_0/bin/:$PATH ./bin/codebase-format-helper.bash C++ -t
        PATH=$HOME/python-tools/bin/:$PATH ./bin/codebase-format-helper.bash CMake -t

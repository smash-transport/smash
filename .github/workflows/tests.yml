on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  check_pull:
    # we use jobs in a matrix.
    # the OS to be used for the test is taken from the current matrix element
    runs-on: ${{ matrix.os }}
    strategy:
      # we want to avoid to stop all the tests the first time that one of them gets an error 
      fail-fast: false
      matrix: 
        include:
        #here we set up the various matrix elements
        #the entries in each matrix element are just variables, not keywords, with (hopefully) self-explaining names
        # 1st matrix element, default compiler at FIAS
        - os: ubuntu-18.04
          packages_to_add: "libboost-all-dev g++-5 doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc-5"
          cxx_compiler_to_use: "g++-5"
        # 2nd matrix element, recent LTS Ubuntu distribution with gcc
        - os: ubuntu-20.04
          packages_to_add: "libboost-all-dev doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc"
          cxx_compiler_to_use: "g++"
        # 3rd matrix element, recent LTS Ubuntu distribution with clang
        - os: ubuntu-20.04
          packages_to_add: "libboost-all-dev libgsl-dev"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
        # 4th matrix element, osx 10.15 with clang
        - os: macos-latest
          packages_to_add: "boost gsl"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
        # 5th matrix element, default compiler in Goethe cluster       
        - os: ubuntu-16.04
          # this time we do not include boost, we compile it later by ourselves
          packages_to_add: "g++-4.8 libgsl-dev"
          c_compiler_to_use: "gcc-4.8"
          cxx_compiler_to_use: "g++-4.8"
    steps:   
    # this is an action provided by GitHub to checkout the repository
    - uses: actions/checkout@v2
    # we set the name of the step, collecting all the tests in just one step
    - name: code_check     
    # we set some environment variables for the specific OS version
      env:
        CC: ${{ matrix.c_compiler_to_use }}
        CXX: ${{ matrix.cxx_compiler_to_use }}
        OS_NAME: ${{ matrix.os }}
      # we run the step. We recall that in YAML the pipe symbol "|" means that the follwing lines, including newlines, are interpreted literally
      run: |
        # we set the smash root directory
        export SMASH_ROOT=$PWD        
        # we install the missing packages
        if [ $OS_NAME == "macos-latest" ]; then
            brew install ${{ matrix.packages_to_add }}
        else
            sudo apt-get install ${{ matrix.packages_to_add }} -y
        fi
        # we download and install Pythia
        wget https://pythia.org/download/pythia83/pythia8303.tgz && tar xf pythia8303.tgz && rm pythia8303.tgz && cd pythia8303
        ./configure --cxx-common='-std=c++11 -march=native -mfpmath=sse -O3 -fPIC' && make -j$(nproc) && cd ..
        # we download and unpack clang
        if [ $OS_NAME == "macos-latest" ]; then curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz;
        else curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi &&
        mkdir clang6_0_0 && tar -xf clang6_0_0.tar.xz -C clang6_0_0 --strip-components=1
        # if we use gcc-4.8 we download and build also boost
        if [ $CXX == "g++-4.8" ]; then
            curl https://deac-fra.dl.sourceforge.net/project/boost/boost/1.75.0/boost_1_75_0.tar.gz -o boost_1_75_0.tar.gz --silent && tar -xf boost_1_75_0.tar.gz
            cd boost_1_75_0 && ./bootstrap.sh --with-libraries=filesystem,system && ./b2 toolset=gcc-4.8 && export BOOST_DIR=$PWD && cd ..            
        fi        
        # we get eigen
        wget http://gitlab.com/libeigen/eigen/-/archive/3.3.9/eigen-3.3.9.tar.gz && tar -xf eigen-3.3.9.tar.gz -C $HOME
        # we get cpplint
        wget https://raw.githubusercontent.com/cpplint/cpplint/develop/cpplint.py && chmod +x cpplint.py && mkdir -p $HOME/bin && mv cpplint.py $HOME/bin
        export PATH=$HOME/bin:$PATH
        # now we build SMASH
        cd $SMASH_ROOT && mkdir build && cd build
        # if we use gcc-4.8 we use our self built boost
        if [ $CXX == "g++-4.8" ]; then
            cmake .. -DPythia_CONFIG_EXECUTABLE=$SMASH_ROOT/pythia8303/bin/pythia8-config -DBOOST_ROOT=$BOOST_DIR -DCMAKE_INSTALL_PREFIX=$HOME/eigen-3.3.9/ \
            -DCMAKE_CXX_FLAGS="-O3 -march=native -std=c++11 -mfpmath=sse"
        else
            cmake .. -DPythia_CONFIG_EXECUTABLE=$SMASH_ROOT/pythia8303/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$HOME/eigen-3.3.9/ \
            -DCMAKE_CXX_FLAGS="-O3 -march=native -std=c++14 -mfpmath=sse"
        fi
        make -j$(nproc)
        # we check the building of the documentation for a specific case
        if [ $OS_NAME == ubuntu-18.04 ]; then make undocumented && make undocumented_test; fi
        # we check the correct formatting of the code with clang
        PATH=$SMASH_ROOT/clang6_0_0/bin/:$PATH ./../bin/clang-format-helper.bash -t
        # we run the tests
        CTEST_OUTPUT_ON_FAILURE=1 ctest -j$(nproc)
